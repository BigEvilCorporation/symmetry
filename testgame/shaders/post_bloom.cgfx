float4x4 WorldViewProj : WorldViewProjection;

float Magnitude = 0.008;
float Alpha = 0.8;

bool HighRange = true;

const float2 offsets[12] =
{
   {-0.326212, -0.405805},
   {-0.840144, -0.073580},
   {-0.695914,  0.457137},
   {-0.203345,  0.620716},
    {0.962340, -0.194983},
    {0.473434, -0.480026},
    {0.519456,  0.767022},
    {0.185461, -0.893124},
    {0.507431,  0.064425},
    {0.896420,  0.412458},
   {-0.321940, -0.932615},
   {-0.791559, -0.597705},
};

///////////////////////////////
//Textures
///////////////////////////////
texture RTTTexture 
<
	string UIName =  "RTTTexture Texture";
	string ResourceType = "2D";
>;

///////////////////////////////
//Samplers
///////////////////////////////
sampler2D RTTSampler = sampler_state
{
	Texture = <RTTTexture>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};

///////////////////////////////
//Structs
///////////////////////////////
struct VOutput
{
    float4 Position : POSITION;
	float2 UVCoord  : TEXCOORD0;
};

struct POutput
{
	float4 Colour : COLOR;
	float4 Depth : DEPTH;
};

///////////////////////////////
//Pixel shader
///////////////////////////////
POutput PShader(VOutput IN)
{
	POutput OUT;

	float4 BloomPixel = tex2D(RTTSampler, IN.UVCoord);
    
    //accumulate the color values from 12 neighboring pixels
    for(int i = 0; i < 12; i++)
	{
        BloomPixel += tex2D(RTTSampler, IN.UVCoord + Magnitude * offsets[i]);
    }
	
    //average the sum
    BloomPixel /= 13;
    
    //expand the higher range if applicable
    if(HighRange) BloomPixel = (BloomPixel - 0.5) * 2.0;
    
    //fix alpha
    BloomPixel.a = Alpha;

	OUT.Colour = BloomPixel;
	return OUT;
}

technique Main
{
	pass Pass0
	{
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = true;
		BlendEnable = false;
		DepthFunc = LEqual;	
		//VertexProgram = compile vp30 VShader();
		FragmentProgram = compile fp30 PShader();
	}
}
